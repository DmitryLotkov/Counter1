{"version":3,"sources":["Display.tsx","Buttons.tsx","ErrorDisplay.tsx","Wrapper.tsx","Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Display","props","isDisabled","className","counter","maxValue","Buttons","Button","disabled","errorCondition","onClick","enlargeCounter","color","variant","size","disableElevation","resetCounter","startValue","ErrorDisplay","Wrapper","Settings","inputMaxError","inputStartError","value","onChange","e","setMaxCounterValue","currentTarget","disableButton","type","setStartCounterValue","equalizeCounter","App","useState","setStartValue","setMaxValue","setCounter","setIsDisabled","useEffect","startValueAsString","localStorage","getItem","newValue","JSON","parse","maxValueAsString","newMaxValue","setItem","stringify","currentStartValue","clear","currentMaxValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1342f808.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport type DisplayPropsType = {\r\n    counter: number\r\n    isDisabled: boolean\r\n    maxValue: number\r\n}\r\nexport function Display(props: DisplayPropsType) {\r\n        return(\r\n            props.isDisabled ? <div className={\"attentionMessage\"}>Enter values and press 'set'</div>:\r\n                <div className={props.counter === props.maxValue ? \"counterEqualMaxValue\" : \"defaultDisplay\"}>\r\n                    {props.counter}</div>\r\n        )\r\n\r\n\r\n}","import {Button} from \"@material-ui/core\";\r\nimport React from \"react\";\r\n\r\n\r\ntype ButtonsPropsType={\r\n    enlargeCounter: () => void\r\n    resetCounter: (currentStartValue: number) => void\r\n    maxValue: number\r\n    counter: number\r\n    errorCondition: boolean\r\n    startValue: number\r\n    isDisabled: boolean\r\n}\r\nexport function Buttons(props: ButtonsPropsType) {\r\n    let resetCounter = () =>{\r\n        props.resetCounter(props.startValue)\r\n    }\r\n    return (\r\n        <div className={\"buttons\"}>\r\n                <span className={\"button\"}>\r\n                    <Button  disabled={props.errorCondition || props.counter === props.maxValue || props.isDisabled }\r\n                            onClick={props.enlargeCounter}\r\n                            color={\"primary\"}\r\n                            variant={\"contained\"}\r\n                            size={\"small\"}\r\n                            disableElevation>inc\r\n                            </Button>\r\n                </span>\r\n            <span className={\"button\"}>\r\n                    <Button disabled={props.errorCondition|| props.isDisabled}\r\n                        onClick={resetCounter}\r\n                        color={\"primary\"}\r\n                        variant={\"contained\"}\r\n                        size={\"small\"} disableElevation>reset\r\n                        </Button>\r\n\r\n                </span>\r\n\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\n\r\n\r\nexport function ErrorDisplay() {\r\n    return (\r\n        <div className={\"errorDisplay\"}>Incorrect value</div>\r\n\r\n    )\r\n}","import {Display} from \"./Display\";\r\nimport React from \"react\";\r\n\r\nimport {Buttons} from \"./Buttons\";\r\nimport {ErrorDisplay} from \"./ErrorDisplay\";\r\n\r\nexport type WrapperPropsType = {\r\n    enlargeCounter: () => void\r\n    resetCounter: (currentStartValue: number) => void\r\n    counter: number\r\n    maxValue: number\r\n    errorCondition: boolean\r\n    startValue: number\r\n    isDisabled: boolean\r\n}\r\n\r\nexport function Wrapper(props: WrapperPropsType) {\r\n\r\n    return (\r\n        <div className={\"Wrapper\"}>\r\n            <div className={\"header\"}>\r\n                {props.errorCondition ?\r\n                    <ErrorDisplay/> :\r\n                    <Display counter={props.counter}\r\n                             isDisabled={props.isDisabled}\r\n                             maxValue={props.maxValue}/>\r\n                    }\r\n            </div>\r\n            <div>\r\n                <Buttons enlargeCounter={props.enlargeCounter}\r\n                         resetCounter={props.resetCounter}\r\n                         maxValue={props.maxValue}\r\n                         counter={props.counter}\r\n                         errorCondition={props.errorCondition}\r\n                         startValue={props.startValue}\r\n                         isDisabled={props.isDisabled}\r\n                />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import {Button} from \"@material-ui/core\";\r\nimport React, {ChangeEvent} from \"react\";\r\n\r\n\r\ntype SettingsPropsType = {\r\n    setStartCounterValue:(currentStartValue:number) => void\r\n    maxValue: number\r\n    setMaxCounterValue: (currentMaxValue: number) => void\r\n    startValue: number\r\n    errorCondition: boolean\r\n    equalizeCounter: (currentStartValue:number) => void\r\n    isDisabled: boolean\r\n    disableButton: () => void\r\n}\r\nexport function Settings(props: SettingsPropsType) {\r\n\r\n    let setCurrentStartValue = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        props.setStartCounterValue(+e.currentTarget.value) //получаем текущее значние maxValue и синхр стейт\r\n        props.disableButton(); //раздизейблим кнопку при синхризации стейта startValue\r\n    }\r\n    let setCurrentMaxValue = (e:ChangeEvent<HTMLInputElement>) =>{\r\n        props.setMaxCounterValue(+e.currentTarget.value); //получаем текущее значние maxValue и синхр стейт\r\n        props.disableButton(); //раздизейблим кнопку при синхризации стейта maxValue\r\n    }\r\n\r\n\r\n    let onclickHandler = ()=> {\r\n\r\n        props.setStartCounterValue(props.startValue) // синхнизируем стейт startValue\r\n        props.equalizeCounter(props.startValue); //уравниваем значения startValue и counter\r\n\r\n    }\r\n    let inputMaxError = props.maxValue < 0 ||\r\n        props.maxValue === props.startValue||\r\n        props.startValue>props.maxValue;\r\n    let inputStartError = props.startValue < 0 ||\r\n        props.maxValue === props.startValue||\r\n        props.startValue>props.maxValue;\r\n\r\n    return (\r\n        <div className={\"Wrapper\"}>\r\n            <div className={\"settings\"}>\r\n                <div className={\"values\"}>\r\n                    <div>max value:</div>\r\n                    <div>start value:</div>\r\n                </div>\r\n\r\n                <div>\r\n                    <input value={props.maxValue}\r\n                           onChange={setCurrentMaxValue}\r\n                           className={ inputMaxError ? \"inputError\":\"input\"}\r\n                           type={\"number\"}/>\r\n                    <input value={props.startValue}\r\n                           onChange={setCurrentStartValue}\r\n                           className={ inputStartError ? \"inputError\":\"input\"}\r\n                           type={\"number\"}/>\r\n                </div>\r\n\r\n\r\n            </div>\r\n            <div className={\"setButton\"}>\r\n                <Button disabled={!props.isDisabled||props.errorCondition}\r\n                        onClick={onclickHandler} color={\"primary\"}\r\n                        className={\"button\"}\r\n                        size={\"small\"}\r\n                        variant={\"contained\"}>set</Button>\r\n            </div>\r\n\r\n        </div>)\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Wrapper} from \"./Wrapper\";\nimport {Settings} from \"./Settings\";\n\n\nfunction App() {\n    let [startValue, setStartValue] = useState<number>(0);\n    let [maxValue, setMaxValue] = useState<number>(5);\n    let [counter, setCounter] = useState<number>(startValue);\n    let [isDisabled, setIsDisabled] = useState<boolean>(false);\n\n    useEffect(() => {\n        let startValueAsString = localStorage.getItem(\"startCounterValue\");\n        if (startValueAsString) {\n            let newValue = JSON.parse(startValueAsString);\n            setStartValue(newValue)// сохряняем startValue в localStorage\n        }\n        let maxValueAsString = localStorage.getItem(\"maxCounterValue\");\n        if (maxValueAsString) {\n            let newMaxValue = JSON.parse(maxValueAsString);\n            setMaxValue(newMaxValue);\n        }\n        /*let counterValue = localStorage.getItem(\"counterValue\");\n        if(counterValue){\n            let newCounterValue = JSON.parse(counterValue);\n            setCounter(newCounterValue);\n        }*/\n    }, [])\n    useEffect(() => {\n        localStorage.setItem(\"startCounterValue\", JSON.stringify(startValue));\n        localStorage.setItem(\"maxCounterValue\", JSON.stringify(maxValue));\n        //localStorage.setItem(\"counterValue\", JSON.stringify(counter));\n    }, [startValue, maxValue, counter])\n\n    let errorCondition = (startValue < 0 || maxValue < 0\n        || startValue > maxValue\n        || startValue === maxValue);\n\n\n    let enlargeCounter = () => {\n        setCounter(counter => counter + 1);\n    }\n\n    let resetCount = (currentStartValue: number) => {\n        setCounter(currentStartValue)\n        localStorage.clear();\n    }\n\n    let disableButton = () => {\n        setIsDisabled(true)\n    }\n    let setStartCounterValue = (currentStartValue: number) => {\n        setStartValue(currentStartValue)\n        setIsDisabled(false)\n\n    }\n    let setMaxCounterValue = (currentMaxValue: number) => {\n        setMaxValue(currentMaxValue)\n        setIsDisabled(false)\n    }\n    let equalizeCounter = (currentStartValue: number) => {\n        setCounter(currentStartValue) //уравниваем значения startValue и counter\n\n    }\n\n    return (\n        <div className={\"App\"}>\n            <Wrapper enlargeCounter={enlargeCounter}\n                     resetCounter={resetCount}\n                     counter={counter}\n                     maxValue={maxValue}\n                     startValue={startValue}\n                     errorCondition={errorCondition}\n                     isDisabled={isDisabled}/>\n            <Settings setStartCounterValue={setStartCounterValue}\n                      maxValue={maxValue}\n                      setMaxCounterValue={setMaxCounterValue}\n                      startValue={startValue}\n                      errorCondition={errorCondition}\n                      equalizeCounter={equalizeCounter}\n                      disableButton={disableButton}\n                      isDisabled={isDisabled}/>\n\n        </div>\n\n    );\n}\n\nexport default App;\n\n\n\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}